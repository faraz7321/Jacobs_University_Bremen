-*- mode: org -*-

* Race conditions are real

  Demonstration that race conditions are real and not a theoretical
  problem of little practical relevance. See the race.c file in the
  source code repository linked to the course web page.

* Sempahores (unisex bathroom problem)

  Below is what the students developed jointly during the class
  meeting. The solution is not correct. The problem is that the
  sequence up(&mutex); down(&female); down(&mutex); does not work
  since the state of the system can change inbetween the semaphore
  operations.

# shared state = enum { empty, female, male }
# shared unsigned count = 0;

shared unsigned female_count = 0;
shared unsigned male_count = 0;
semaphore_t mutex = 1;          # mutex to protect counters

semaphore_t male = 0;           # models that males have to wait
semaphore_t female = 0;         # models that female have to wait

void female() {
    down(&mutex);
    if (male_count > 0 || female_count == 3) {
        up(&mutex);
        down(&female);
        down(&mutex);
    }
    female_count++;
    up(&mutex);
    /* USE THE BATHROOM */
    down(&mutex);
    if (female_count == 3) {
        up(&femal);
    }
    female_count--;
    up(&mutex);
}

void male() {
    down(&male);
    // ...
}
