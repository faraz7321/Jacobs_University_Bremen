# -*- mode: org -*-
#+TITLE: Operating Systems Summary
#+AUTHOR: Jürgen Schönwälder
#+STARTUP: overview

* Introduction

  - system calls vs library calls
  - system vs user mode
  - entering the kernel
  - concurrency vs parallelism
  - operating system architectures

  => focus on conceptual understanding
  => good material for multiple choice questions
  
* Hardware

  - cpus, memory, devices
  - memory segments (text, heap, stack, data)
  - stack frames
  - interrupt handling

  => need to know function calls, memory segments, interrupt handling
  => not main material of the course

* Processes and Threads

  - processes vs threads
  - fork() vs exec() vs wait()
  - context switch
  - pthread_create(), pthread_join(), ...

  => find out what a piece of code using concurrency does
  => benefits of the separation of fork() and exec()

* Synchronization

  - race conditions, critical sections
  - bounded buffer, readers-writers, dining philosophers
  - semaphores, semaphore pattern
  - locks and condition variables
  - message passing

  => synchronization problem (there is for sure is going to be one)
  => find out what is wrong in non-correct solutions
  => understand important properties of the mechanisms
     (atomic behavior, while-loops for condition variables,...)

* Deadlocks

  - deadlocks, coffman conditions
  - resource allocation graphs, wait-for graphs
  - deadlock prevention
  - deadlock avoidance, bankers algorithm
  - deadlock detection, bankers algorithm'

  => solving deadlock avoidance/detection problems
  => translate resource allocation graphs into other notations or vice versa
  
* Scheduling

  - preemptive vs. non-preemptive, fair-share
  - deterministic vs. probabilistic
  - scheduling strategies (fcfs, lptf, sptf, srtf, rr, mlfq, edf)

  => creating schedules for given workloads
  => calculate metrics of schedules
  
* Linking

  - symbol resolution, code relocation
  - linker rules (strong and weak symbols)
  - dynamic vs static linking
  - library call interpositioning

  => solving linker puzzles
  
* Memory

  - logical vs physical address spaces
  - address translation
  - locality
  - segmentation vs. paging
  - segmentation positioning strategies
  - buddy system
  - page tables and translation lookaside buffers
  - page faults
  - paging loading strategies
  - paging replacement strategies
  - belady's anomaly, stack algorithms
  - working set model

  => applying positioning strategies
  => solving buddy system allocations / deallocations
  => understand page tables and how translations are done at runtime
  => understand what page faults are and how they are handled
  => solve page loading and replacement strategy exercises
  => understand belady's anomaly and why stack algorithms are good
  => be able to calculate working sets for reference strings

* Communication

  - signals
  - pipes
  - file descriptor tables (vs. open file tables)
  - input and output redirection
  - sockets, socket types, socket addresses
  - name resolution
  - connection-less vs. connection-oriented communication
  - non-blocking input and output
  - multiplexing of input and output
  - server architectures (blocking, forking, multi-threaded, event-driven)

  => understand how signals interrupt the regular control flow
  => analyze out what a given piece of code using pipes does
  => understand file descriptor tables and ways to modify them
  => conceptual understanding of sockets
  => understand the differences between connection-less and
     connection-oriented communication
  => understand non-blocking I/O, multiplexing, event-driven programming

* File Systems

  - regular files, directories, inodes
  - hard links vs. soft links
  - file locking
  - file systems using index nodes (inodes)
  - index-based file system (inodes)

  => understanding of file system concepts and semantics
  => mapping of file system operations to block updates
  
* Devices

  - buffering
  - error reporting
  - representation of devices in user space (filesystem)
  - RAIDs (striping, mirroring, distributed parity)
  - volume management, physical volumes, logical volumes
  - storage area networks vs network attached storage
  - terminal devices and pseudo terminal devices
  - terminal control libraries

  => conceptual understanding of devices
  => user-space representation vs kernel-space implementation
  => understand what pseudo ttys are and how they are used
  
* Virtualization

  - virtualization vs. emulation
  - bare metal vs hosted virtualization
  - paravirtualization
  - MS-level virtualization (container)
  - Linux namespaces and control groups
  - docker, kybernetes

  => understanding of terminology and architectural principles
  => understanding of benefits and limitations of different approaches
