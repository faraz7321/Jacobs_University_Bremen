-*- mode: org -*-

* Synchronization Pattern with Locks and Condition Variables

** Mutual Exclusion with Locks and Condition Variables

   mutex_t mutex = unlocked;

   lock(&mutex);
   // ...
   unlock(&mutex);

** Multiplex with Locks and Condition Variables

   count = 0;
   mutex_t mutex = unlocked;
   condvar_t condvar;

   lock(&mutex);
   while (count >= N) {
       wait(&condvar, &mutex);
   }
   count++;
   unlock(&mutex);
   // ...
   lock(&mutex);
   count--;
   signal(&condvar);
   unlock(&mutex);

   What happens if you increment the counter before the while loop?

   Hint: Consider the situation where many threads have arrived and a
   thread leaves - what happens after signaling a thread?

* Signaling with Locks and Condition Variables

    typedef struct {
        mutex_t mutex = unlocked;
        condvar_t condvar;
        bool condition = false;
    } signal_t;

    signal_t a, b;

    waiting_thread()                    signaling_thread()
    {                                   {
        lock(&mutex);                       lock(&mutex); 
        while (! condition) {               condition = true;
            wait(&condvar, &mutex);         signal(&condvar);
        }                                   unlock(&mutex);
        condition = false;              }
        unlock(&mutex);
    }

* Rendevous with Locks and Condition Variables

* Simple Barrier with Locks and Condition Variables

  typedef struct {
      mutex_t mutex;
      condvar_t condvar;
      unsigned count;
      unsigned max;
      bool go;
  } barrier_t;

  barrier_init(barrier_t *b, unsigned max)
  {
      b->max = max;
      b->go = false;
  }

  barrier_wait(barrier_t b)
  {
      lock(&b->mutex);
      b->count++;
      if (b->count == b->max) {
           b->go = true;
           broadcast(b->condvar);
      } else {
           while (! b->go) {
               wait(b->condvar, b->mutex);
           }
      }
      b->count--;
      if (b->count == 0) {
          b->go = false;
      }
      unlock(&b->mutex);
  }

  Is this always correct? Can it be that threads arrive after the gate
  has been opened and then they sneak through? It may be necessary to
  control this by going through two gates...

  https://gist.github.com/edrdo/f226a1387104851e691817ef1e4e4c93

* Double Barrier with Locks and Condition Variables

